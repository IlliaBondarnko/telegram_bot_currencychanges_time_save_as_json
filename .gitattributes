#_________WORKING WITH IMPORTS____________________________________________________________

from datetime import datetime
import json 
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
from telegram import KeyboardButton, ReplyKeyboardMarkup

#_________________________________________________________________________________________
#_________STARTING THE BOT________________________________________________________________


TOKEN = '5338479753:AAFzPCrocDj05i_nAAnU5JVMpmVj61LiUjc'
print("Bot started")
updater = Updater(TOKEN)


def start(update, context):
    chat = update.effective_chat
    buttons = [
        [KeyboardButton('/make_a_note')],
        [KeyboardButton('/check_my_notes')],
        [KeyboardButton('/delete_the_note')]
        ]
    context.bot.send_message(chat_id=chat.id, text="""Hi there! 
    \ni'm your friend, so you may entrust me the most secret things üòú
    \nI would be glad to listen to youüòÑ""", reply_markup=ReplyKeyboardMarkup(buttons))


#_________WORKING WITH MEMORY_____________________________________________________________
#_________________________________________________________________________________________


def saver(new_note):
    now = datetime.now()
    save_to_json={
        'note' : f'{"-"+str(new_note)}',
        'date' : f'{now.strftime("%d.%m.%Y")}'
    }

    try:
        with open("notes.json") as f:
            data = list(json.load(f))
            data.append(save_to_json)
        with open("notes.json", 'w') as f:
            json.dump(data, f, indent=3)
    except FileNotFoundError:
        data = []
        data.append(save_to_json)
        with open('notes.json', 'w') as f:
            json.dump(data, f, indent=3)


#_________________________________________________________________________________________
#_________WORKING WITH NOTES______________________________________________________________


def first_addnote(update, context):
    chat = update.effective_chat
    context.bot.send_message(chat_id=chat.id, text="""
    okay, write down a note!üñäÔ∏èüëá""")
    return 1

    
def second_addnote(update, context):
    chat = update.effective_chat    
    new_note = str(update.message.text)
    saver(new_note) 
    context.bot.send_message(chat_id=chat.id, text="""
    well done!üëç""")
    return ConversationHandler.END


def cancel(update):
    update.message.reply_text(
        'Cancelled by user. Send /make_a_note to start again')
    return ConversationHandler.END


def checking_the_notes(update, context):
    chat = update.effective_chat
    try:
        with open("notes.json") as f:
            data = list(json.load(f))
            context.bot.send_message(chat_id=chat.id, text="""
            __________________""")
            for i in data:
                all_notes = i["note"]
                context.bot.send_message(chat_id=chat.id, text=f"{all_notes}")
            context.bot.send_message(chat_id=chat.id, text="""
            __________________""")
    except FileNotFoundError:
        context.bot.send_message(chat_id=chat.id, text="""
        you haven't added any notes yet""")


def first_deleter(update, context):
    chat = update.effective_chat
    context.bot.send_message(chat_id=chat.id, text="""
    please write the number of the note,\nor text it allüòâ""")
    return 1
    

def second_deleter(update, context):
    chat = update.effective_chat
    note = str(update.message.text)
    if note.isalpha() == True:
        try:
            with open("notes.json") as f:
                data = list(json.load(f))
                for i in data:
                    if i['note'] == note:
                        data.remove(i)
            with open("notes.json", 'w') as f:
                json.dump(data, f, indent=3)
            context.bot.send_message(chat_id=chat.id, text="""
    well done!üëç""")
        except FileNotFoundError:
            context.bot.send_message(chat_id=chat.id, text="""
            you have added nothing yetüòÖ""")
    ConversationHandler.END

    
#_________________________________________________________________________________________
#_________ADDING COMMANDS AND FUNCTIONS___________________________________________________


adding_handler = ConversationHandler(
    entry_points=[CommandHandler('make_a_note', first_addnote)],
    states={
            1: [MessageHandler(Filters.text, second_addnote)]
    },
    fallbacks=[CommandHandler('cancel', cancel)]
)


deleting_handler = ConversationHandler(
    entry_points=[CommandHandler('delete_the_note', first_deleter)],
    states={
            1: [MessageHandler(Filters.text, second_deleter)]
    },
    fallbacks=[CommandHandler('cancel', cancel)]
)


disp = updater.dispatcher
disp.add_handler(adding_handler)
disp.add_handler(deleting_handler)
disp.add_handler(CommandHandler("start", start))
disp.add_handler(CommandHandler("check_my_notes", checking_the_notes))
updater.start_polling()
updater.idle()
#_________________________________________________________________________________________
