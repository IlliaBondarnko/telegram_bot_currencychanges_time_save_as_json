#_________WORKING WITH IMPORTS____________________________________________________________

# from datetime import datetime
import json 
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
from telegram import KeyboardButton, ReplyKeyboardMarkup

#_________________________________________________________________________________________
#_________STARTING THE BOT________________________________________________________________


TOKEN = '5338479753:AAFzPCrocDj05i_nAAnU5JVMpmVj61LiUjc'
print("Bot started")
updater = Updater(TOKEN)


def start(update, context):
    chat = update.effective_chat
    buttons = [[KeyboardButton('/make_a_note')]]
    context.bot.send_message(chat_id=chat.id, text="""Hi there! 
    \ni'm your friend, so you may entrust me the most secret things ;)
    \nI would be glad to listen to you""", reply_markup=ReplyKeyboardMarkup(buttons))


#_________WORKING WITH MEMORY_____________________________________________________________
#_________________________________________________________________________________________


def saver(new_note):
    save_to_json={
        'note' : f'{"-"+str(new_note)}'
    }

    try:
        with open("notes.json") as f:
            data = list(json.load(f))
            data.append(save_to_json)
        with open("notes.json", 'w') as f:
            json.dump(data, f, indent=3)
    except FileNotFoundError:
        data = []
        data.append(save_to_json)
        with open('notes.json', 'w') as f:
            json.dump(data, f, indent=3)


#_________________________________________________________________________________________
#_________WORKING WITH NOTES______________________________________________________________


def first_addnote(update, context):
    chat = update.effective_chat
    context.bot.send_message(chat_id=chat.id, text="""
    okay, write down a note!)""")
    return 1

    
def second_addnote(update, context):
    chat = update.effective_chat    
    new_note = str(update.message.text)
    saver(new_note) 
    context.bot.send_message(chat_id=chat.id, text="""
    well done!""")
    return ConversationHandler.END

#_________________________________________________________________________________________
#_________ADDING COMMANDS AND FUNCTIONS___________________________________________________


handler = ConversationHandler(
    entry_points=[CommandHandler('make_a_note', first_addnote)],
    states={
            1: [MessageHandler(Filters.text, second_addnote)]
    }
)


disp = updater.dispatcher
disp.add_handler(handler)
disp.add_handler(CommandHandler("start", start))
updater.start_polling()
updater.idle()
#_________________________________________________________________________________________
